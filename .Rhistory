1/lambda
## Part 1: Simulation Study
set.seed(100)
n.sp <- 40
lambda <- 0.2
n.sim <- 1000
mean.sim <- NULL
var.sim <- NULL
for (i in 1:n.sim){
dt.sim <- rexp(n.sp, lambda)
mean.sim <- c(mean.sim, mean(dt.sim))
var.sim <- c(var.sim, var(dt.sim))
}
par(mfrow = c(1,2))
hist(mean.sim)
hist(var.sim)
(1/lamda)^2
(1/lambda)^2
par(mfrow = c(1,2))
hist(mean.sim, title = "Histogram of Sample Mean")
hist(var.sim, title = "Histogram of Sample Vriance")
?hist
par(mfrow = c(1,2))
hist(mean.sim, main = "Histogram of Sample Mean", xlab = "Sample Mean")
hist(var.sim, main = "Histogram of Sample Vriance", xlab = "Sample Variance")
?hist
par(mfrow = c(1,2))
hist(mean.sim, main = "Histogram of Sample Mean", xlab = "Sample Mean")
abline(x = 5)
?abline
par(mfrow = c(1,2))
hist(mean.sim, main = "Histogram of Sample Mean", xlab = "Sample Mean")
abline(v = 5)
hist(var.sim, main = "Histogram of Sample Variance", xlab = "Sample Variance")
abline(v = 25)
?abline
par(mfrow = c(1,2))
hist(mean.sim, main = "Histogram of Sample Mean", xlab = "Sample Mean")
abline(v = 5, col = "red", lwd = 2)
hist(var.sim, main = "Histogram of Sample Variance", xlab = "Sample Variance")
abline(v = 25, col = "red", lwd = 2)
?density
hist(mean.sim, prob = TRUE, main = "Histogram of Sample Mean", xlab = "Sample Mean")
curve(dnorm(mean.sim, mean = 5, sd = 5/sqrt(40)), col = "red", lwd =2, add = TRUE, yaxt = "n")
summary(mean.sim)
hist(mean.sim, prob = TRUE, main = "Histogram of Sample Mean", xlab = "Sample Mean")
curve(dnorm(mean.sim, mean = 5, sd = 5/sqrt(40)))
5/sqrt(40)
setwd("C:/Users/Mansen/Documents/Xiuyun/Coursera/Course 8 - Pratical Machine Learning/Course Project")
training <- read.csv("./training.csv", header = TRUE)
testing <- read.csv("./testing.csv", header = TRUE)
# Clean data: deleting columns that are variables on summary statistics
training.new <- training[, -which(grepl('user_name|X|timestamp|window|kurtosis_|skewness_|max_|min_|
amplitude_|avg_|var_|stddev_|amplitude', names(training)))]
testing.new <- testing[, -which(grepl('user_name|X|timestamp|window|kurtosis_|skewness_|max_|min_|
amplitude_|avg_|var_|stddev_|amplitude', names(testing)))]
# Split training data into train and test datasets
library(caret)
library(gbm)
library(AppliedPredictiveModeling)
set.seed(1001)
set.seed(1001)
intrain <- createDataPartition(training.new$classe, p = 0.05, list = FALSE)
train.sub <- training.new[intrain,]
test.sub<- training.new[-intrain,]
# Model fitting
modfit.rpart <- train(classe ~., data = train.sub, method = "rpart")
modfit.rf <- train(classe ~., data = train.sub, method = "rf")
